#C:/Python27
#Contact: nvanderende@gmail.com

"""The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?"""

#The naive solution is to iteratively calculate triangle numbers, and count the number
#of divisors for each one, or start calculating numbers with >500 divisors and check them          
#for triangle-numbering. That sounds terrible and I won't do it. Instead, let's make note
#of some important points: a triangle number can be written as, rather than a sum of (0, ... n)
#as n*(n+1) / 2. There are no common factors between n and n+1 (other than 1!), so if we
#have x factors for n and y factors for (n+1), the total number of factors for (n*(n+1)) is x*y!

import math

def triangle_number(n):
    return (n * (n+1)) / 2
 
def count_factors(number):
    factor_count = 0
    for x in xrange(2, int(math.sqrt(number))): #sqrt(n) is the last possible factor
        quotient, remainder = divmod(number,x) #both the quotient and its remainder are factors
        if remainder % x == 0: #if the remainder is
			factor_count += 2
    return factor_count
 
count = 1 
while 1:
	factors = ( count_factors(count), count_factors(count+1) )
	if (factors[0] * factors[1]) > 500:
		print triangle_number(count)
		break
	else:
		count += 1
